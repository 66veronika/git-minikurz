git je verzovací systém

-uchovává historii projektu
commit
historie- repozitář (složka  .git = repository)

-větvení (lze upravovat více "větví/branches" najednou)
pokud feature branch je hotová a chceme ji přidat do projektu -> git merge (vložíme ji do main branch)
conflict - pokud se upravoval stejný soubor v dvou rúzných větví ->musí se upravit soubor do jednoho, změny jednho souboru se aplikuje do druhého

-uploadování (na společné úložiště - nejčastěji se používá github)
uploadujou se aktuální soubory + historie změn - jde vidět na githubu

github- online úložiště pro vaši historii souboru
- ostatní programatoři si mohou vaši historii stáhnout a začít pracovat na stejném projektu
- projekt můžete na githubu vytvořit veřejný nebo privátní

1.instalace gitu (source control) (get git) - git-scm.com
//stahneme si instalaci: https://git-scm.com/downloads
volby v instalaci: 
    1. výchozí editor ->ZVOLIT Visual Editor Code (místo VIM)
    2. jak pojmenovat hlavní větev? místo Master - volba main
    3. další stránka (recommended - asi prostřední)
    4. zbytek instalace nechat stejný a proklikat se nkonec

GIT stejně jako Composer nemá grafické rozhraní (nemá tlačítka a ovládací prvky) - všechno se musí dělat pomocí příkazů
- je možné si do visualu stáhnout grafické rozhraní
-nějaké základní ovládací prvky už visual má
- otevřeme záložku source control (Ctr+Shift+G)
-pokud vidíme 2 tlačítka (initialize repository a publish to github), tak to znamená že VSC rozpoznalo, že máme nainstalovaný git

pokud klikneme na tlačítko init repo, tak se vytcoří repozitář na kořenové složce ( v našem případě programator-unor)
pokud chceme vytvořit historii v nějaké konkrétní složce, tak je lepší použít terminálový příkazů

otevereme si terminal na složce "git.minikurz"
# git init

(git init vytvoří do složky projektu neviditelnou složku. Tato neviditelná složka se jmenuje .git. Abychom tuto složku mohly vidět tak je potřeba zapnout v průzkumníku volbu zobrazit skryté soubory - v htdocs - git.minikurz (zobrazit -> zobrazit -> show hidden items))
(můžeme smazat neviditelnou složku git v htdocs)

slozka .git v sobě obsahuje celou historii projektu, dokud máte složku .git, tak je uplne jedno, jaké soubory smažete - vždy se to dá zpětně obnovit

git začne sledovat vaše změny
! u souboru se pak mohou objevit nějaká písmenka
U - untracked, soubor je nový a ještě neexistuje v historii
A - added, soubor je nový a chystá se na první zápis do historie
M - modified, soubor už v historii existuje, někdo soubor poeditoval od poslední historie
D - deleted, soubor v historii existuje, ale někdo ho označil za smazaný

navíc se v levém panelu v záložce source control objevilo číslo, které říká kolik souborů bylo změněno

musíme si zýchytné body historie vytvářet sami
říká se tomu commity/snapshoty/checkpointy

Vytvoření commitu
vašemu projektu se v gitu říká workspace

mezi workspace a repository (historie) je stage (dáme tam předměty předtím než je dáme do historie)

musíte relevantní soubory z workplace označit do staging area
staging area je prostor pro soubory, které se chystáte zapsat do repozitáře
chceme aby byly seskupeny soubory,k teré mají spolu něco společného
díky staging area si můžeme všechnu práci, co jsme udělali rozdělit do menších commitů

před commitem je potřeba definovat identifikační údaje autora - jinak to vyhodí chybu ->musíme pustit 2 příkazy
    1.) # git config --global user.name "Student" 
    2.) # git config --global user.email "student@student.cz"
    tyto 2 příkazy musíme spustit v terminálu

commit můžeme udělat pomocí grafckého rozhraní nebo zase pomocí příkazu
A) pomocí grafického rozhraní
   -každý soubor u sebe bude mít nějaké písmenko,které říká v jakém stavu soubor je
   -klikneme na +  ->soubor je ve "stage area"
   -musíme přidat komentář (popis změny, co soubory dělají) - do kolonky nahoře
   -klikneme na commit (vidíme M)

vždycky pojmenovat commit, tak aby abylo jasné, co commit vykoná
tip:vždy začněte větou "Co tento commit udělá, když ho někdo adoptuje?" odpoved - použijte jako commit komentář
např: přidá kontaktní formulář, odebere zastaralou listu, opravi chybu rezervace


//B) commitovani pomici prikazu
//otevrem terminal ve slozce projektu
//zjistit jake soubory se zmenily
// # git status
přesun souborud o stagovaci faze
// # git add nazev-souboru
(# gid add ./  - uloží všechny soubory v aktuální složce - nemusíme přidávat soubory po jednom - nebo # git add .)

tento příkaz provede commit souboru, co jsou ve stage fazi
# get commit -m "komentar commitu"

pokud se chcete podivat na seznam všech commitů, tak spustit tento příkaz ->
# git log

PRIVATE
občas máte v pracovní složce projektu soubory, které jsou citlivé a neměly by se nikdy dostat ven 
nebo to mohou byt knihovny (např složka vendor)
tyto soubory můžeme uvést do .gitignore, aby je git vubec nevidel a nesledoval, tyto soubory se pak nikdy do commitu nedostanou


obcas mate v pracovni slozce projektu soubory, ktere jsou citlive a nemely by se nikdy dostat ven
- nebo to mohou byt knihovny
- tyto sobory muzeme uvest do .gitignore, aby je git vubec nevidel a sledoval, tato soubory se pak nikdyo do commitu nedostanou
- abychom pri commitovani nemuseli furt manualne citlive soubory odebirat, tak je muzeme uvest do souboru -> .gitignore
- kazdy soubor/slozka uvedeny v .gitignore ma svuj vlastni radek
- slozky vzdy budou koncit /gitignore

pokud chceme zaignorovat 
    public.log
    admin.log
    testing.log
= pro šechny logy ->  *.log
*.log (zaignorují se všechny soubory s koncovkou .log)
* znamená libovolný string


pokud pracujeme sami, tak stačí místí historie pouze u sebe na lokalu - local repo
pokuda ale chcete pracovat v tymu, tka je potreba localni repo nakopirovat do remote repo (rika se tomu origin)
ostatni spolupracovnici budou vzdy synchronizovat sve localni repo s originem
pokud projekt u sebe jeste spolupracovnik nema, tak musi provest clonovani (nakopirovani celeho repo z remotu do zarizeni a vytvorit se local repo)
potom, co váš spolupracovník dokončí své úkoly, tak může do remote repo "pushnout" zmeny
pokud nedojde ke klonflitu, tak github zmeny prijme a zaintegruje
pokud ostatni spolupraocvnici chteji mit aktualni verzi tak musi udelat "pull"
pri pushovani muze nastat konflikt (2 lidi se snazi pushnout zmeny ve stejnem souboru a github neví, kterého upřednostnit nebo jak tyto dva kody spojit)

pokud nemáte práva pushovat do hlavní větve programu (např u juniorů) tak muíste vytvořit pull request (PR)
PR se používá k tomu, aby váš senior vaši práci zkontroloval
-> pokud je vše v pořádku, tak váš senior kod přijme a github ho zaintegruje do hlavni vetve

upload "local repo" na github = push
stahnuti "remote repo/origin" z github k sobe = clone
pokud nastal conflict - musime si stahnout zmeny = pull, upravime a pak muzeme zase "push"

ucet na github.com
alternativne  můžeme použít jiné služby např GitLab nebo BitBucket














větve názvy
bugfix, hotfix, feature, wip (work in progress)
